##### DJANGO NOTES #####
Our main project, RRR, connectsd to different 'apps' that each perform a functionality if our website


### DJANGO ARCHITECTURE ###
- MTV architecture
- MODEL: Contains the essential fields of the dats you store
- TEMPLATE: Describes how the data is presented
- VIEW: Describes which data you see
- see https://docs.djangoproject.com/en/2.1/faq/general/#django-appears-to-be-a-mvc-framework-but-you-call-the-controller-the-view-and-the-view-the-template-how-come-you-don-t-use-the-standard-names


### APPS ###
## Apps for our project ##
1. pages: will handle all static pages that like index, about, helpfaq, terms, etc.
2. listings: will handle anything to do with listings, individual listings, etc.
3. accounts: will handle login, logout, register

## Creating a new app ##
- run 'python manage.py startapp <nameofapp>'
- add 'urls.py' to the generated folder
- add the app to INSTALLED_APPS in settings.py

## App files  ##
- see https://docs.djangoproject.com/en/2.1/intro/tutorial01/


### TEMPLATES FOLDER ###
- views will render .html files from a templates folder defined in settings.py 


### DJANGO TEMPLATE LANGUAGE ###
- see https://docs.djangoproject.com/en/2.1/ref/templates/language/


### STATIC FOLDER ###
- static files are any css, js, img files that won't change for the website
- very confusing, we have to use a generated folder for our website to be able to link to them
- add any static files you want into RRR/RRR/static
- must set the root and url of the static folder in settings.py
- run 'python manage.py collectstatic' to collect the static files into RRR/static


### MIGRATIONS FOLDERS ###
- create class in models.py
- create fields that will map to the table in rrrdb
- run 'python manage.py makemigrations' to generate the migrations respective to each app
- run 'python manage.py migrate' to apply the migrations


### MEDIA FOLDER ###
- this is the folder where user uploaded images will go
- must set the root and url of the media folder in settings.py
- auto-generated folder when a user uplaods a photo for listing
- structure will be media/photos/year/month/day


### ADMIN ###
- create an admin folder in 'templates'
- add a file called base_site.html
- see https://docs.djangoproject.com/en/2.0/intro/tutorial07/


### ACCOUNTS ###
- login and register forms: method = "POST"
- add {% csrf_token %} to prevent cross site request forgery, see https://docs.djangoproject.com/en/2.1/ref/csrf/

## Form input validation ##
- we will use django's built-in messaging for authenticated users
- see https://docs.djangoproject.com/en/2.1/ref/contrib/messages/ 
- created a '_alerts.html' partial for error messages, use with {% include 'partials/_alerts.html' %}
- in views.py, simply call messages.error(request, 'Testing error message')
- authentication docs: https://docs.djangoproject.com/en/2.1/topics/auth/default/
- check for logged in user with {% if user.is_authenticated %} ... {% else %} ... {% endif %}